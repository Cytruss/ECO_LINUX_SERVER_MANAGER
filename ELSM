#!/bin/bash

#Add color for info.
green='\e[1;32m'
red='\e[0;31m'
yellow='\e[1;33m'

#source /opt/ELSM/Files/conf.cfg
SELECTED_DIR=$2
DIR="/opt/ELSM/Server"


do_startup() {
##Simple check to make sure there is actually a server built##
##############################################################
if [ -z "$SELECTED_DIR" ]; then
do_multi_check
fi

source $DIR/$SELECTED_DIR/conf.cfg
if [ ! -f $DIR/$SELECTED_DIR/EcoServer.exe ]; then
do_newserver
else
echo "updates disabled"
#do_update
##We will now ask about ECO upgrades.
do_ECO_upgrade_check
fi
}



do_update() {
#cd $INSTALL_LOC/Files/
#wget https://raw.githubusercontent.com/kicker22004/ECO_LINUX_SERVER_MANAGER/master/Files/update.sh -O update.sh
$INSTALL_LOC/Files/update.sh "${SELECTED_DIR[@]}"
}

do_no_menu_start() {
source $DIR/$SELECTED_DIR/conf.cfg
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if ! screen -list | grep -o "${MONITOR}"; then
     cd $DIR/$SELECTED_DIR
     $WATCH_START "${SELECTED_DIR[@]}"
  else
     echo "Server was found running... close it before running this"
  fi
  if ! screen -list | grep -q "WATCH"; then
     cd $DIR/$SELECTED_DIR
     $WATCH_START "${SELECTED_DIR[@]}"
  fi
}

do_no_menu_stop() {
source $DIR/$SELECTED_DIR/conf.cfg
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if screen -list | grep -o "${MONITOR}"; then
    cd $DIR/$SELECTED_DIR
    $WATCH_STOP
    screen -S $MONITOR -p 0 -X stuff "exit $(printf \\r)"
  else
     echo "No server was found to be running...did you start on?"
  fi
}

##Time to include a restart command..
do_restart() {
if(whiptail --fb --title "Restart Eco Server?" --yes-button "Yes" --no-button "No"  --yesno "Would You like to restart Eco?" 10 60) then
	while true; do
		if screen -list | grep -q "ECO"; then
			$STOP
			break
		else
			echo "No server was found, Starting now..."
			do_no_menu_start
		fi
done
fi
}


### List options that we want in simple edit.
do_start_config() {
CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
##Get the lists!
unset FALLBACK SEL LIST
FALLBACK="do_start_config"
LIST=$(ls $DIR/$SELECTED_DIR/Configs/ | awk -F. '{print $1" |"}')
SEL=$(whiptail --menu --fb "Configs Menu" --ok-button Enter --cancel-button Back 20 60 10 ${LIST[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
do_main_config
fi
}

do_world_size() {
CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
SEL="WorldGenerator"
WG_SIZE=$(whiptail --fb --title "World Size" --radiolist "Choose: (Spacebar to select!)" 20 60 10\
  "Little_Big_Planet" "[20x20 World]" off \
  "1X (Default)" "[100x100 World]" on \
  "2X" "[140x140 World]" off \
  "4X" "[200x200 World]" off \
  3>&1 1>&2 2>&3)
if [ "$WG_SIZE" = "Little_Big_Planet" ]; then
jq '.Dimensions.x = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "1X (Default)" ]; then
jq '.Dimensions.x = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "2X" ]; then
jq '.Dimensions.x = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "4X" ]; then
jq '.Dimensions.x = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
}

do_main_config() {
nano $CONFIGS/$SEL.eco
$FALLBACK
}

do_first_run() {
(
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to start server"
        echo XXX
        sleep 1
        echo XXX
        echo 50
        echo "LONG WAIT, UP TO 1HOUR!!!!"
	source $DIR/$SELECTED_DIR/conf.cfg
	cd $DIR/$SELECTED_DIR
	$WATCH_START "${SELECTED_DIR[@]}"
        echo XXX
        #Allow the server 1hour minutes to load..
        #If server doesn't go down, Force it.
	 for ((i=3600;i>0;i=i-1)); do
                clear
                ELSM_PID=$(lsof -Pi :$PORT -sTCP:LISTEN -t)
                if [ -z $ELSM_PID ]; then
#                echo -e ${yellow}"The ECO server is loading up for the first time!, Depending on your machine this could take A LONG TIME.. Please wait..."
                echo -n "Time Remaining $i seconds, Before Failure.."
               	if ! screen -list | grep -q "ECO"; then
                	clear
                	echo "For some reason your server failed to load and has crashed.... Please report this to the forum and attemt to run it manually to find clues..."
                	exit 1
                fi
               sleep 1
              else
               break
              fi
              done
	if ! screen -list | grep -o "${SESSIONID}"; then
		cd $DIR/$SELECTED_DIR
		$WATCH_START "${SELECTED_DIR[@]}"
	fi
	echo 60
        echo XXX
        echo 80
        echo "The sun is rising."
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
##Leave the script so we don't confuse users and attempt to start it after it's all ready up.
INTERNAL_IP=$(hostname -I | awk '{print $1}')
whiptail --msgbox --fb "Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001" 20 60 0
clear
echo -e ${green}"Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001"
echo -e ${yellow}"To run the ECO_LINUX_SERVER_MANAGER interface just type ${red}ELSM${yellow} in your terminal"
tput sgr0
echo $SELECTED_DIR
}

do_start() {
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if ! screen -list | grep -o "${MONITOR}"; then
	cd $DIR/$SELECTED_DIR
	$WATCH_START "${SELECTED_DIR[@]}"
    whiptail --fb --msgbox "Your Server is loading up please check the client after a bit of time..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
if ! screen -list | grep -q "WATCH"; then
     cd $DIR/$SELECTED_DIR
     $WATCH_START "${SELECTED_DIR[@]}"
fi
}


do_stop() {
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if ! screen -list | grep -o "${MONITOR}"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    cd $DIR/$SELECTED_DIR
    $WATCH_STOP
    screen -S $MONITOR -p 0 -X stuff "exit $(printf \\r)"
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}



do_install() {
INSTALL_LOC="/opt/ELSM"
###Grab a list and see what we can do with it##
cd $INSTALL_LOC/Files
GETLIST=$(wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt)
eco_server_list=$(cat server_version.txt | sort -r | awk '{print $1 " |"}')

SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${eco_server_list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION")
fi

r=$(wget $dl_link -O $DIR/$SELECTED_DIR/$SELECTED_VERSION)
if [ $? -ne 0 ]; then
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
fi

cd $DIR/$SELECTED_DIR
#Grab avalible download versions from site (Linux Server only)
unzip $SELECTED_VERSION
rm $SELECTED_VERSION
sed -i 's/ECO_VERSION=.*/ECO_VERSION='$SELECTED_VERSION'/g' $INSTALL_LOC/Files/conf.cfg
sed -i 's/SELECTED_DIR=.*/SELECTED_DIR='$SELECTED_DIR'/g' $INSTALL_LOC/Files/conf.cfg
#Make our own config per server.
echo $SELECTED_DIR
cp $INSTALL_LOC/Files/conf.cfg $DIR/$SELECTED_DIR/
#cp $INSTALL_LOC/Files/watch.sh $DIR/$SELECTED_DIR/
#sed -i 's:SELECTED_DIR=.*:SELECTED_DIR='$SELECTED_DIR':g' conf.cfg
#sed -i 's/START="screen -dmS ECO/START="screen -dmS '${SELECTED_DIR}'/g' $DIR/$SELECTED_DIR/conf.cfg
#sed -i 's/STOP="screen -X -S ECO/STOP="screen -X -S '${SELECTED_DIR}'/g' $DIR/$SELECTED_DIR/conf.cfg
#sed -i 's/WATCH_START="screen -dmS WATCH/WATCH_START="screen -dmS '${SELECTED_DIR}_WATCH'/g' $DIR/$SELECTED_DIR/conf.cfg
#sed -i 's/WATCH_STOP="screen -X -S WATCH/WATCH_STOP="screen -X -S '${SELECTED_DIR}_WATCH'/g' $DIR/$SELECTED_DIR/conf.cfg
#sed -i 's:source.*:source '${DIR}'/'${SELECTED_DIR}'/conf.cfg:g' $DIR/$SELECTED_DIR/watch.sh

source $DIR/$SELECTED_DIR/conf.cfg
do_world_size
do_start_config
do_first_run
}

do_upgrade() {
whiptail --msgbox --fb --title "404" "This menu is going to be disabled for right now, It's a bit to rushed and I would like to fine tune it more. Sorry guys i'll get to it soon." 20 60 0
}
#if screen -list | grep -q "ECO"; then
#    cd $DIR/$SELECTED_DIR
#    $WATCH_STOP
#    $STOP
#fi

#cd $INSTALL_LOC/Files
#wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt 
#UPGRADE_VERSIONS=$(cat server_version.txt | sort -r | grep -n $ECO_VERSION | cut -d ":" -f1)
#UPGRADE_LIST=$(sed ''$UPGRADE_VERSIONS',$d' server_version.txt | sort -r | awk '{print $1 " |"}')
#echo "This is your Upgrade_list: $UPGRADE_LIST"

#if [ $UPGRADE_VERSIONS = "1" ]; then
#        whiptail --fb --msgbox --title "Latest Version found!" "You're currently running the latest ECO Beta, Check back later" 10 70 0
#do_menu
#else
#rm -rf $INSTALL_LOC/Backup/*
#rm $INSTALL_LOC/Archives/UPGRADE_ROLLBACK.tar.gz
#cd $INSTALL_LOC/Archives
#cp $INSTALL_LOC/Files/conf.cfg $SELECTED_DIR/
#tar -zcvf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR .
#tar -xf UPGRADE_ROLLBACK.tar.gz -C $INSTALL_LOC/Backup/
#rm -rf $SELECTED_DIR/*
#cd $INSTALL_LOC
#SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${UPGRADE_LIST[@]} 3>&1 1>&2 2>&3)
#RET=$?
#if [ $RET -eq 1 ]; then
##Falling back
#cd $INSTALL_LOC/Archives/
#tar -xf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR
#whiptail --fb --msgbox --title "Emergency Recovery" "Your server was restored because you canceled" 10 60 0
#do_menu
#elif [ $RET -eq 0 ]; then
#dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION")
#fi
#
#r=$(wget $dl_link -O $SELECTED_DIR/$SELECTED_VERSION)
#if [ $? -ne 0 ]; then
#whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
#The current link is: $dl_link" 20 60
#fi
#fi
#cd $SELECTED_DIR
##Grab avalible download versions from site (Linux Server only)
#unzip $SELECTED_VERSION
#rm $SELECTED_VERSION
#if [ ! -d $SELECTED_DIR/Storage ]; then
#        mkdir $SELECTED_DIR/Storage
#fi
#sed -i 's/ECO_VERSION=.*/ECO_VERSION='$SELECTED_VERSION'/g' $INSTALL_LOC/Files/conf.cfg
#cp -R $INSTALL_LOC/Backup/Storage/* $SELECTED_DIR/Storage/
#cp $INSTALL_LOC/Backup/conf.cfg $DIR/$SELECTED_DIR/


## Grabing saved configs.
#VAR=( $(ls $SELECTED_DIR/Configs/) )
#x=0
#while [ $x -le "${#VAR[@]}" ]
#do
#SELECTED="${VAR[$x]}"
#x=$(( $x + 1 ))
#if [ $x = "${#VAR[@]}" ]; then
#break
#else
#jq -s 'add' $SELECTED_DIR/Configs/$SELECTED $INSTALL_LOC/Backup/Configs/$SELECTED | sponge $SELECTED_DIR/Configs/$SELECTED
#fi
#done
#whiptail --fb --msgbox --title "Completed" "Your server is now running version: $SELECTED_VERSION" 10 60 0
#cd $DIR/$SELECTED_DIR
#$WATCH_START
#source /opt/ELSM/Files/conf.cfg
#do_menu
#}

do_restore() {
whiptail --fb --yesno "THIS IS ONLY IF YOUR UPGRADE FAILED... NOT THE SAME AS ROLLBACK!" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
rm -rf $SELECTED_DIR/*
cd $INSTALL_LOC/Archives/
tar -xf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR
mv $SELECTED_DIR/conf.cfg /$INSTALL_LOC/Files/
whiptail --fb --msgbox --title "Emergency Recovery" "Your server was restored to your last backup!" 10 60 0
do_menu
fi
}

do_rollback() {
ROLLBACK=$(ls $SELECTED_DIR/Storage/Backup/ | awk '{print $1 " |"}')

if [ ! $ROLLBACK ]; then
	whiptail --msgbox --fb --title "NOTHING FOUND!" "You have no backups to fallback to." 10 60
else
	whiptail --msgbox --fb --title "Stopping ECO server" "This requires the server to be stopped, Stopping now." 10 60 0
	cd $DIR/$SELECTED_DIR
	$WATCH_STOP
        $STOP
	SELECTED_BACKUP=$(whiptail --menu --fb "Select Your ECO backup." 20 60 10 ${ROLLBACK[@]} 3>&1 1>&2 2>&3)
	RET=$?
	if [ $RET -eq 0 ]; then
		cd $SELECTED_DIR/Storage/Backup/
		cp $SELECTED_BACKUP ../Game.eco
	fi
fi
}

do_map_reset() {
whiptail --fb --yesno "This will reset your world and backups, A new world will be built...Continue?" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
	cd $DIR/$SELECTED_DIR
	$WATCH_STOP
	$STOP
	rm -rf $DIR/$SELECTED_DIR/Storage/*
	$WATCH_START
	whiptail --msgbox --fb "Your server is now Generating the new world!, please give it time." 15 60
fi
}

do_complete_wipe() {
whiptail --fb --yesno "This will completely erase your server and configs...Continue?" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
       	cd $DIR/$SELECTED_DIR
	$WATCH_STOP
       	$STOP
       	rm -rf $SELECTED_DIR/*
	do_install
        whiptail --msgbox --fb "Your server is now Generating the new world!, please give it time." 15 60
fi
}

do_server_select() {
list=$(ls /opt/ELSM/Server/ | sort -n | awk '{print $n " |"}')
SELECTED_DIR=$(whiptail --menu --fb "Select the server you with to manage." 20 60 10 ${list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
cd $DIR/$SELECTED_DIR
echo $DIR
echo $DIR/$SELECTED_DIR
sed -i 's:SELECTED_DIR=.*:SELECTED_DIR='$SELECTED_DIR':g' conf.cfg

if [ ! -f  /opt/ELSM/Server/$SELECTED_DIR/conf.cfg ]; then
echo "File is missing"
cp /opt/ELSM/Files/conf.cfg /opt/ELSM/Server/$SELECTED_DIR/conf.cfg
fi
source $DIR/$SELECTED_DIR/conf.cfg
fi
}

do_newserver() {
NEW=$(whiptail --fb --title "Creating a new server!" --inputbox "Please give your server a name." 10 60 ECO 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
echo "You choose to leave."
exit 1
elif [ $RET -eq 0 ]; then
NEW=${NEW// /_}
    mkdir $DIR/"${NEW}"
    SELECTED_DIR="${NEW}"
    do_install
fi
}

do_multi_check() {
list=$(ls /opt/ELSM/Server/ | wc -l)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
if [ $list == "0" ]; then
source $INSTALL_LOC/Files/conf.cfg
do_newserver
else
if [ $list -eq "1" ]; then
SELECTED_DIR=$(ls $DIR/)
sed -i 's/SELECTED_DIR=.*/SELECTED_DIR='${SELECTED_DIR}'/g' $DIR/$SELECTED_DIR/conf.cfg
source $DIR/$SELECTED_DIR/conf.cfg
else
do_server_select
fi
fi
fi
}

do_reset_menu() {
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Map Reset" "[Simple world erase, Saving configs.]" \
    "2 Server Reset" "[Erase everything, including configs..]" \
  3>&1 1>&2 2>&3)
RET=$?
   if [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_map_reset ;;
      2\ *) do_complete_wipe ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  elif [ $RET -eq 1 ]; then
  do_menu
  fi
done
}


do_upgrade_menu() {
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Upgrade" "[Upgrade ECO]" \
    "2 Rollback" "[Rollback from ECO backups]" \
    "3 Restore" "[Fallback to working server prior to upgrade attempt.]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    do_menu
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_upgrade ;;
      2\ *) do_rollback ;;
      3\ *) do_restore ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_ECO_upgrade_check() {
cd $INSTALL_LOC/Files
wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt
UPGRADE_VERSIONS=$(cat server_version.txt | sort -r | grep -n $ECO_VERSION | cut -d ":" -f1)
UPGRADE_LIST=$(sed ''$UPGRADE_VERSIONS',$d' server_version.txt | sort -r | awk '{print $1 " |"}')

if [ ! $UPGRADE_VERSIONS = "1" ]; then
	if (whiptail --fb --title "ECO Upgrade Notice!" --yesno "There were ECO upgrades found!, Would you like to update now?" 10 78) then
    		do_upgrade
	fi
fi
}

do_menu() {
do_startup
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Start" "[Attempts to start the server]" \
    "2 Stop" "[Attempt to stop the server]" \
    "3 Restart" "[Restart the server]" \
    "4 Configs" "[Allows you to make changes to config files]" \
    "5 Upgrade/Fallback" "[Upgrade ECO or fallback after failed upgrade.]" \
    "6 Server Reset menu" "[Map wipes or complete server wipes!]" \
    "7 Multi Server menu" "[Create More servers!]" \
    "8 Info" "[Fast information about the server.]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_start ;;
      2\ *) do_stop ;;
      3\ *) do_restart ;;
      4\ *) do_start_config ;;
      5\ *) do_upgrade ;;
      6\ *) do_reset_menu ;;
      7\ *) do_newserver ;;
      8\ *) do_info ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_info(){
if screen -list | grep -q "ECO"; then
STATUS="ONLINE"
else
STATUS="OFFLINE"
fi
on_now=$(ss -t | grep -o "$PORT" | wc -l)
#Calculate accurate CPU usage.
cpufree=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
CPU=$(echo "scale=1; x=100-$cpufree; if(x<1) print 0; x" | bc)
#Gather Internal and External IP
EXTERNAL_IP=$(/usr/bin/curl -s http://mdrjr.net/ip.php)
INTERNAL_IP=$(hostname -I | awk '{print $1}')
ELSM_PID=$(lsof -Pi :$PORT -sTCP:LISTEN -t)
UPTIME=$(ps -o etime= -p $ELSM_PID)
LOAD=$(uptime | grep -o "load average.*")
RAM=$(free -mh | grep Mem | awk '{print $4}')
RAM_TOTAL=$(free -mh | grep "Mem" | awk '{print $2}')
TOTAL=$(du -sh $SELECTED_DIR | awk '{print $1}')
HDD_TOTAL=$(df -kh . | grep / | awk '{print $4}')
MONO_VERSION=$(mono -V | grep version.* | cut -d " " -f 5)
whiptail --fb --clear --title "Current server stats" --yesno --yes-button REFRESH --no-button Back \
"Server Status: $STATUS \n
ELSM Version: $ELSM_VERSION \n
Start on Boot: $startonboot \n
Server Version: $ECO_VERSION \n
Current Players Online: $on_now \n
CPU Usage is: $CPU% \n
Server Uptime: $UPTIME \n
$LOAD \n
Ram Available: "$RAM\B"(Free/Total)"$RAM_TOTAL\B" \n
Server size on disk: $TOTAL(Used/Free)$HDD_TOTAL \n
Your Mono Version is: $MONO_VERSION \n
IP: $INTERNAL_IP | Remote IP: $EXTERNAL_IP" 35 55 10
CHOICES=$?
unset TOTAL on_list CPU LOAD UPTIME RAM STATUS
  if [ $CHOICES -eq 0 ]; then
   	do_info
fi
clear
}



case "$2" in
   (*)
   SELECTED_DIR=$2
    ;;
esac

case "$1" in
   (list)
    ls $DIR/
    exit 0
    ;;
  (help)
    do_help
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
 (info)
   do_info
    exit 0
    ;;
 (restart)
   do_restart
    exit 0
    ;;
  (*)
    do_menu
    exit 0
    ;;
esac
